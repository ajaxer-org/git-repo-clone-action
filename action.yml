name: 'Git Repository Clone Action'
description: 'This GitHub Actions workflow allows you to clone a repository and check out a specific branch or tag. It is designed to be reusable across different workflows and repositories.'

branding:
  icon: 'git-commit'
  color: 'white'


inputs:
  repo_url:
    description: 'Repository url'
    required: true  # Changed from 'required' to true for proper syntax
    type: string
  branch:
    description: 'Branch to check out (optional)'
    required: false
    type: string
  directory:
    description: 'Directory where the repository should be cloned (Optional)'
    required: false
    type: string
  list_files:
    description: 'List all the files after checkout(optional)'
    required: false
    type: boolean
    default: false



runs:
  # Using composite actions allows multiple steps in a single action
  using: 'composite'

  steps:

    # Define environment variables
    - name: Define environment variables
      shell: bash  # Specifying the shell to use (bash in this case)
      id: vars
      run: |
        if [ -z "${{ inputs.branch }}" ]; then
          echo "checkoutBranch=${{ github.ref_name }}" >> $GITHUB_ENV
        else
          echo "checkoutBranch=${{ inputs.branch }}" >> $GITHUB_ENV
        fi
        
        if [ -z "${{ inputs.directory }}" ]; then
          echo "targetDirectory=." >> $GITHUB_ENV
        else
           echo "targetDirectory=${{ inputs.directory }}" >> $GITHUB_ENV
        fi
    

    # Clone the request repository (using native git clone) where this commit happened
    - name: Clone the request repository - ${{ inputs.repo_url }}
      shell: bash  # Specifying the shell to use (bash in this case)
      run: |
        echo ""
        echo "Variables: BRANCH: [${{ env.checkoutBranch }}], DIRECTORY: [${{ env.targetDirectory }}]"
        echo ""
        echo "git cloning: ${{ inputs.repo_url }}"
        git clone ${{ inputs.repo_url }} "$DIRECTORY"


    - name: Branch Checkout
      shell: bash  # Specifying the shell to use (bash in this case)
      run: |
        echo ""
        echo "git checking out ${{ env.checkoutBranch }} in ${{ env.targetDirectory }}"
        git -C ${{ env.targetDirectory }} checkout ${{ env.checkoutBranch }}

        echo ""
        echo "git status"
        git -C ${{ env.targetDirectory }} status


    - name: List All Files after checkout
      if: inputs.list_files == 'true'
      shell: bash
      run: |
        echo ""
        echo "list"
        ls -lahR | grep -v '\.git'